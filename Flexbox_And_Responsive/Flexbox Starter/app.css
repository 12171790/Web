body {
    font-family: 'Open Sans', sans-serif;
}
h1 {
    text-align: center;
}
#container {
    background-color: #003049;
    width: 90%;
    height: 500px;
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
}

/* flexbox에는 두 개의 축이 존재. main axis, cross 
main axis는 왼쪽에서 오른쪽 방향의 축
cross axis는 위쪽에서 아래쪽 방향의 축
flex-direction은 컨테이너 안에서 main axis 방향을 결정하는 속성 */

#container div {
    width: 200px;
    height: 200px;
    /* max-width: 300px;
    min-width: 50px; */
    text-align: center;
    flex-basis: 600px;
    flex-grow: 1;
}

main {
    width: 80%;
    margin: 0 auto;
    border: 5px solid black;
    height: 500px;
    display: flex;
}

main .sidebar {
    background-color: #6930c3;
    flex: 1 2 300px;
}

main .maincontent {
    background-color: #80ffdb;
    flex: 2 1 800px;
}
/* div:nth-of-type(5) {
    align-self: flex-start;
} */

/* justify-content main axis를 기준으로 요소와 컨텐츠를 어떻게 배치할지 결정
오른쪽 정렬, 가운데 정렬 등등 */

/* flex-wrap main axis가 수평일 때 새로운 행을 만들어 요소를 정렬 주축이 수직일 때는 새로운 열을 만들어 요소를 정렬 
flex-wrap은 cross axis를 조절*/

/* align-items cross axis를 따라 요소를 배열. baseline은 텍스트의 기준선에 맞춰서 정렬 
justify-content의 cross axis 버젼*/

/* align-content 행이나 열이 여러 개일 때 교차축을 기준으로 정렬. 여러 개일 때만 사용하는 정렬 방법
flex-wrap이 적용되어야 작동함 */

/* align-self align-content와 유사하지만 단일 요소에 적용하거나 flex container에서 두 개 요소에 개별로 사용
교차 축을 기준으로 배열된 단일 요소의 위치를 바꿀 수 있음
둘 다 cross axis를 기준으로 결정 */

/* flex-basis 요소가 배치되기 전에 요소의 최초 너비(주축을 기준)를 결정 */

/* flex-grow 공간이 있을 때 요소가 그 공간을 얼마나 차지할지 결정
옆에 오는 숫자는 남는 공간을 차지할 비율 예를 들어 1번째 div는 1이고 2번째 div가 2이면 2번째 div가 1번째 div보다 2배 더
남는 공간을 많이 차지함 */

/* flex-shrink 남는 공간이 없을 때 요소들이 줄어드는 비율을 통제
후에 오는 숫자는 다른 요소에 비해 얼마나 더 줄어들지 결정. 0으로 하면 아예 줄어들지 않음.*/

/* flex를 통해 basis, grow, shrink 세 가지를 한 번에 설정할 수 있다. grow - shrink - basis 순
flex: 2 2; -> flex-grow | flex-shrink
flex: 2 30px; -> flex-grow | flex-basis 
flex: 2; -> flex-grow*/

/* div:nth-of-type(2) {
    align-self: flex-end;
}

div:nth-of-type(3) {
    align-self: center;
} */
